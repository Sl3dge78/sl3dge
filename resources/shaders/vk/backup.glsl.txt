/*
uint tea(uint val0, uint val1)
{
  uint v0 = val0;
  uint v1 = val1;
  uint s0 = 0;

  for(uint n = 0; n < 16; n++)
  {
    s0 += 0x9e3779b9;
    v0 += ((v1 << 4) + 0xa341316c) ^ (v1 + s0) ^ ((v1 >> 5) + 0xc8013ea4);
    v1 += ((v0 << 4) + 0xad90777d) ^ (v0 + s0) ^ ((v0 >> 5) + 0x7e95761e);
  }

  return v0;
}


uint lcg(inout uint prev)
{
  uint LCG_A = 1664525u;
  uint LCG_C = 1013904223u;
  prev       = (LCG_A * prev + LCG_C);
  return prev & 0x00FFFFFF;
}

float rnd(inout uint prev)
{
  return (float(lcg(prev)) / float(0x01000000));
}

vec3 get_base_color(Material mat) {

    if(mat.base_color_texture < UINT_MAX) {
        return texture(textures[mat.base_color_texture], in_texcoord).rgb * mat.base_color;
    } else {
        return mat.base_color;
    }
}
float geometry_schlick_ggx(float NdotV, float roughness){
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
} 
float geometry_smith(float NdotL, float NdotV, float roughness){
    float ggx1 = geometry_schlick_ggx(NdotV, roughness);
    float ggx2 = geometry_schlick_ggx(NdotL, roughness);

    return ggx1 * ggx2;
}

float distribution_ggx(float NdotH, float alpha_roughness) {
    float a2 = alpha_roughness*alpha_roughness;
    
    float NdotH2 = NdotH * NdotH;

    float nom = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = M_PI * denom * denom;

    return nom / denom;
}
vec3 fresnel_schlick(float cos_theta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(max(1.0 - cos_theta, 0.0), 5.0);
}
float rim(vec3 N, vec3 V, float power, float strength) {
    float rim = 1.0 - clamp(dot(N, V), 0.0, 1.0);
    rim = clamp(pow(rim, power) * strength, 0.0, 1.0);
    return rim;
}
vec3 pbr(Material mat) {
  
    vec3 base_color = get_base_color(mat);
    float metallic = mat.metallic_factor;
    float roughness = mat.roughness_factor;
    
    if(mat.metallic_roughness_texture < UINT_MAX) {
        vec3 tex = texture(textures[mat.metallic_roughness_texture], in_texcoord).rgb;
        
        roughness *= tex.g;
        metallic *= tex.b;
    } 
    
    float alpha_roughness = roughness * roughness;

    vec3 F0 = vec3(0.04);  
    F0 = mix(F0, base_color.rgb, metallic);
    
    vec3 Lo = vec3(0.0);
	
    //vec3 light_color = vec3(.99, .72, 0.07);
    vec3 light_color = vec3(1.0, 1.0, 1.0);
   	float attenuation = 10.0;
    vec3 radiance = light_color * attenuation;

    vec3 V = normalize(in_cam_pos-in_worldpos);
    vec3 N = get_normal(mat);
    vec3 L = normalize(light_dir);
    vec3 H = normalize(V + L);
    float NdotL = max(dot(N, L), 0.0);
    float NdotH = max(dot(N, H), 0.0);
    float NdotV = max(dot(N, V), 0.0);
    float HdotV = max(dot(H, V), 0.0);
    
    float NDF = distribution_ggx(NdotH, alpha_roughness);
    float G = geometry_smith(NdotL, NdotV, roughness);
    vec3 F = fresnel_schlick(HdotV, F0);
        
    vec3 numer = NDF * G * F;
    float denom = 4.0 * NdotV * NdotL;
    vec3 specular = numer / max(denom, 0.001);
    
    vec3 kD = (vec3(1.0) - F) * (1.0 - metallic);   
    vec3 diffuse = kD * (base_color.rgb / M_PI);
    
   //vec3 rim_light = vec3(1.0) * rim(normal, V, mat.rim_pow, mat.rim_strength);
    vec3 rim_light = vec3(0.0);

    vec3 ambient = vec3(0.1);

    Lo += (diffuse + specular) * radiance * NdotL;
    
    if(mat.ao_texture < UINT_MAX) {
        float ao = texture(textures[mat.ao_texture], in_texcoord).r;
        Lo = mix(Lo, Lo * ao, 0.5);
    }
    return Lo;
}
vec3 specular_reflection(float VdotH, vec3 r0, vec3 r90) {
    return r0 + (r90 - r0) * pow(clamp(1.0 - VdotH, 0.0, 1.0), 5.0);
}
float geometric_occlusion(float NdotL, float NdotV, float r) {
    float attenuation_l = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
    float attenuation_v = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
    return attenuation_l * attenuation_v;
}
vec3 pbr2(Material mat) {
    vec3 f0 = vec3(0.04);
    vec3 base_color = get_base_color(mat);
    
    float metallic = mat.metallic_factor;
    float roughness = mat.roughness_factor;
    if(mat.metallic_roughness_texture < UINT_MAX) {
        vec3 tex = texture(textures[mat.metallic_roughness_texture], in_texcoord).rgb;
        roughness *= tex.g;
        metallic *= tex.b;
    } 

    vec3 diffuse_color = base_color.rgb * (vec3(1.0) - f0);
    diffuse_color *= 1.0 - metallic; 

    float alpha_roughness = roughness * roughness;
    vec3 specular_color = mix(f0, base_color.rgb, metallic);

    float reflectance = max(max(specular_color.r, specular_color.g), specular_color.b);
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specular_environment_R0 = specular_color.rgb;
    vec3 specular_environment_R90 = vec3(1.0) * reflectance90;

    vec3 N = get_normal(mat);
    vec3 V = normalize(in_cam_pos - in_worldpos);
    vec3 L = normalize(light_dir);
    vec3 H = normalize(L+V);

    float NdotL = clamp(dot(N, L), 0.001, 1.0);
    float NdotV = clamp(abs(dot(N, V)), 0.001, 1.0);
    float NdotH = clamp(dot(N, H), 0.0, 1.0);
    float LdotH = clamp(dot(L, H), 0.0, 1.0);
    float VdotH = clamp(dot(V, H), 0.0, 1.0);

    vec3 F = specular_reflection(VdotH, specular_environment_R0, specular_environment_R90);
    float G = geometric_occlusion(NdotL, NdotV, alpha_roughness);
    float D = distribution_ggx(NdotH, alpha_roughness);
    
    const vec3 light_color = vec3(5.0);

    vec3 diffuse_contrib = (1.0 - F) * (diffuse_color / M_PI);
    vec3 spec_contrib = F * G * D / (4.0 * NdotL * NdotV);

    vec3 color = NdotL * light_color * (diffuse_contrib + spec_contrib);
    
    return color;
}
*/