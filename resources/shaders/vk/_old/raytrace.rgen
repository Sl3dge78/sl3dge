#version 460 core
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_debug_printf : enable

layout(binding = 0, set = 1, rgba8) uniform image2D image;
layout(binding = 1, set = 1) uniform accelerationStructureEXT tlas;
layout(binding = 0, set = 0) uniform CameraMatrices {
    mat4 proj;
    mat4 view;
    mat4 view_inverse;
    mat4 shadow_mvp;
    vec3 pos;
    vec3 light_dir;
} cam;

struct HitPayload {
    vec3 direct_color;
};

layout(location = 0) rayPayloadEXT HitPayload payload;

const float fov = 90.f;
const float half_fov = 45.0f;
const float tan_half_theta = 1.61977519054f;

void main () {

   const float half_width = gl_LaunchSizeEXT.x/2.0;
	const float half_height = gl_LaunchSizeEXT.y/2.0;
	const float dist = half_width / tan_half_theta;

    const vec3 cam_pos = vec3(cam.view[0][3],cam.view[1][3],cam.view[2][3]);


	vec2 uv = vec2(gl_LaunchIDEXT / gl_LaunchSizeEXT);

	vec3 ray_origin = (cam.view_inverse * vec4(cam_pos, 1)).xyz;

    vec4 target = normalize(vec4(gl_LaunchIDEXT.x - half_width,  (gl_LaunchSizeEXT.y - gl_LaunchIDEXT.y) - half_height, -dist, 0));
    vec4 ray_dir = cam.view_inverse * target;

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.00;
    float t_max = 100000;

	traceRayEXT(tlas, ray_flags, 0xFF, 0, 0, 0, ray_origin.xyz, t_min, ray_dir.xyz, t_max, 0);

	vec3 color = payload.direct_color;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}

/*

 const float half_width = gl_LaunchSizeEXT.x/2.0;
	const float half_height = gl_LaunchSizeEXT.y/2.0;
	const float dist = half_width / tan_half_theta;

	const vec3 cam_pos = vec3(cam.view[0][3],cam.view[1][3],cam.view[2][3]);
	const mat4 view_inverse = inverse(cam.view);

	vec2 uv = vec2(gl_LaunchIDEXT / gl_LaunchSizeEXT);

	vec3 ray_origin = cam_pos;
	vec3 target = normalize(vec3(gl_LaunchIDEXT.x - half_width, gl_LaunchIDEXT.y - half_height, -dist));

    vec3 ray_dir = (view_inverse * vec4(target, 1.0)).xyz;

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    float t_min = 0.00;
    float t_max = 100000;

	traceRayEXT(tlas, ray_flags, 0xFF, 0, 0, 0, ray_origin, t_min, ray_dir, t_max, 0);

	vec3 color = payload.direct_color;
    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));

void main() {

    uint seed = tea(gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.x, int(clockARB()));
    float r1 = rnd(seed);
    float r2 = rnd(seed);
    vec2 subpixel_jitter = cam.frame == 0 ? vec2(0.5,0.5) : vec2(r1, r2);

    const vec2 pixel_center = vec2(gl_LaunchIDEXT.xy) + subpixel_jitter;
    const vec2 uv = pixel_center/vec2(gl_LaunchSizeEXT.xy);
    vec2 d = uv * 2.0 - 1.0;

    //payload.ray_origin = (cam.view_inverse * vec4(0,0,0,1)).xyz;
    payload.ray_origin = cam.pos;
    vec4 target = cam.proj_inverse * vec4(-d.x, -d.y, 1,1);
    payload.ray_dir = (cam.view_inverse * vec4(normalize(target.xyz), 0)).xyz;

    uint ray_flags = gl_RayFlagsOpaqueEXT;
    uint mask = 0xff;
    float t_min = 0.00;
    float t_max = STEP_DIST; // Density
    payload.direct_color = vec3(0);
    payload.vol_col = vec3(0.0);
    payload.vol_abs = vec3(1.0);
    for(payload.depth = 0; payload.depth < 32; payload.depth++) {
        payload.pos = payload.ray_origin + payload.ray_dir * t_max;
        traceRayEXT(top_level_AS, ray_flags, mask, 0, 0, 0, payload.ray_origin, t_min, payload.ray_dir, t_max, 0);
        payload.ray_origin += payload.ray_dir * t_max;
    }
    vec3 color = payload.direct_color * payload.vol_abs + payload.vol_col;


    if(cam.frame > 0) {
        float a = 1.0 / float(cam.frame + 1);
        vec3 old_color = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color,color,a), 1.0));
    } else {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
    }
}
*/