------------
-- ENGINE --
------------

--------
 TODO

	[ ] Renderer destroy transform	
	[ ] Shader refactoring
		[ ] Load all shader uniform locations at the start
		[ ] Use pipelines for the other shaders?
	[ ] BLENDER - Skin & Animate the character
	[ ] Sky diffraction
		[ ] Where to do it ? Volumetric pass? Or new skybox pass?
	[ ] Volumetric clouds
	[ ] Audio	
	[ ] Scene Graph
		[ ] Flagging as dirty should add the node in a special array that will compute the global matrices for it and its' children
	[ ] Figure out how to handle freeing meshes/transforms from our dyntables
		[ ] Flag some spaces as free, maybe have a table that lists all the free spots?
		[ ] Make it cleanup itself on its own?
	[ ] Figure out multithreading
	[ ] Memory allocator
		[ ] Remove all memory allocations from game
			[ ] PushUIFmt & PushUIText
			[ ] EventPush
			[ ] GLTF
			[ ] Must be some in Renderer too
		[ ] Replace by our own
			[ ] Allocate mega chunk at the start
			[ ] Suballocate from it
			[ ] Handle freeing
			[ ] Maybe have multiple type of memories? For example: static (kept through frames), temp (erased between frames)
	[ ] Profiling
	[ ] SIMD
      
--------
 DOING
	
	[ ] Refactor mesh loading
		[ ] Make our own gltf parser
			[X] Open file
			[X] Accessors
			[X] Buffer Views
			[X] Buffers
			[X] Meshes
				[X] Primitives
				[ ] Multiple primitives
			[ ] Nodes
			[X] Skins
			[ ] Animations
			[X] Images
			[ ] Materials
			[ ] Textures
			[ ] Scene
		[ ] Import in engine
			[X] Mesh
			[ ] Nodes
			[X] Skin
			[ ] Animations
			[ ] Material
		[ ] Give flags to a function? A struct with all possible results and it fills it based on the flags

--------
 DONE

	[X] Fix hot reloading
	[X] Renderer refactoring
	[X] Log to the console AND the game
	[X] Skinned meshes
	[X] Cleanup utils
	[X] Transforms
	[X] Animations


-----------------        
-- GAME DESIGN --
-----------------

TODO
	[ ] Dialog
		[ ] Beep beeps Ã  la Phoenix Wright
	[ ] NPC Schedules
	[ ] Combat v0.1
	[ ] Buildings & Interiors
	[ ] Quests

--------
DOING



--------
DONE






















-----

VULKAN RENDERER:
    CRITICAL:
        - Resize the texture array, rebuild the pipeline?
        - Reloading the renderer doesn't reload the meshes and stuff
            ? Should we kill renderer hot reloading?
            - Mesh data (buffers, textures) prevents us from hot reloading
                ? Game could store all the loaded meshes and their instance data and send it back to the renderer on reload.
                ? Spliting the renderer in two (backend/frontend) could make it possible to reload the backend only.
                    > Frontend has mesh data and all and sends it to the backend on reload
                    > Backend is the current stuff
                ? Push all rendering data each frame. Seems dumbs but it could work. Easy to multithread. Works with a procedural approach.
        - Dynamic array of meshes
            - Take a decision on frontend/backend first
        ? Split the way we store render data
            > Renderer has list of meshes
            > Game has pointer to these meshes and their xform info
                > To render, pack this all up and send it to the renderer
        - !!!!Make sure that we can load different GLTF, I think the mat id and tex id are hardcoded

    MAJOR:
        - Have a way to update render groups without recreating the whole thing? What we do in UpdateWindow is kind of a cheat.
        - Dynamic Volumetric Fog resolution for perf

    BACKLOG:
        - UI

    IMPROVEMENTS:
        - Can't create a scene without textures
        - IBL?
        - Utiliser des Staging buffers
        - Pipeline caches
        - Pick the device according to our specs
        - Pipeline dynamic state
        - Apparently we should only allocate big stacks of memory
    IDEAS:
        - Volumetric clouds
        - Mipmaps
        - Have a look at vkCmdDrawIndirect
        - Maybe use rayquery for shadows?
        - Group descrptor sets
            - Descriptor set 0 > could be the same for all pipelines
            > Could have the camera matrices and the shadowmap sampler

            GLTF:
    CRITICAL:
    MAJOR:
        - If we have multiple meshes that use the same primitve, right now we just duplicate it
        - Read embedded glb