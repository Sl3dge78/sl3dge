GAME:
    CRITICAL:
    MAJOR:
    BACKLOG:
        - Create a testbed scene. And use it to develop stuff
            - Flat
            - Add NPCs
            - Add buildings
            - ...
    IMPROVEMENTS:
    IDEAS:
        - Stat based combat
        - Dialogues
        - Quest tree

OPENGL RENDERER :
    CRITICAL:
    MAJOR:
        - Handle multiple primitives in single gltf
    BACKLOG:
    IMPROVEMENTS:
    IDEAS:

VULKAN RENDERER:
    CRITICAL:
        - Resize the texture array, rebuild the pipeline?
        - Reloading the renderer doesn't reload the meshes and stuff
            ? Should we kill renderer hot reloading?
            - Mesh data (buffers, textures) prevents us from hot reloading
                ? Game could store all the loaded meshes and their instance data and send it back to the renderer on reload.
                ? Spliting the renderer in two (backend/frontend) could make it possible to reload the backend only.
                    > Frontend has mesh data and all and sends it to the backend on reload
                    > Backend is the current stuff
                ? Push all rendering data each frame. Seems dumbs but it could work. Easy to multithread. Works with a procedural approach.
        - Dynamic array of meshes
            - Take a decision on frontend/backend first
        ? Split the way we store render data
            > Renderer has list of meshes
            > Game has pointer to these meshes and their xform info
                > To render, pack this all up and send it to the renderer
        - !!!!Make sure that we can load different GLTF, I think the mat id and tex id are hardcoded

    MAJOR:
        - Have a way to update render groups without recreating the whole thing? What we do in UpdateWindow is kind of a cheat.
        - Dynamic Volumetric Fog resolution for perf

    BACKLOG:
        - UI

    IMPROVEMENTS:
        - Can't create a scene without textures
        - IBL?
        - Utiliser des Staging buffers
        - Pipeline caches
        - Pick the device according to our specs
        - Pipeline dynamic state
        - Apparently we should only allocate big stacks of memory
    IDEAS:
        - Volumetric clouds
        - Mipmaps
        - Have a look at vkCmdDrawIndirect
        - Maybe use rayquery for shadows?
        - Group descrptor sets
            - Descriptor set 0 > could be the same for all pipelines
            > Could have the camera matrices and the shadowmap sampler

            GLTF:
    CRITICAL:
    MAJOR:
        - If we have multiple meshes that use the same primitve, right now we just duplicate it
        - Read embedded glb
    BACKLOG:
    IMPROVEMENTS:
    IDEAS:
        - This is our last dependency. It looks super annoying to handle.

WIN32 :
    CRITICAL:
        - FTIME TRACE HOW DOES IT WORK
    MAJOR:
    BACKLOG:
        - Figure out multithreading
    IMPROVEMENTS:
    IDEAS:
        - Should I make my own memory allocator?
